// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: instore.sql

package db

import (
	"context"
)

const createInstore = `-- name: CreateInstore :one
INSERT INTO instore (
  book,
  owner,
  bookcount
) VALUES (
  $1, $2, $3
)
RETURNING book, owner, bookcount, created_at
`

type CreateInstoreParams struct {
	Book      string `json:"book"`
	Owner     string `json:"owner"`
	Bookcount int64  `json:"bookcount"`
}

func (q *Queries) CreateInstore(ctx context.Context, arg CreateInstoreParams) (Instore, error) {
	row := q.queryRow(ctx, q.createInstoreStmt, createInstore, arg.Book, arg.Owner, arg.Bookcount)
	var i Instore
	err := row.Scan(
		&i.Book,
		&i.Owner,
		&i.Bookcount,
		&i.CreatedAt,
	)
	return i, err
}

const getInstore = `-- name: GetInstore :one
SELECT book, owner, bookcount, created_at FROM instore
WHERE book = $1 LIMIT 1
`

func (q *Queries) GetInstore(ctx context.Context, book string) (Instore, error) {
	row := q.queryRow(ctx, q.getInstoreStmt, getInstore, book)
	var i Instore
	err := row.Scan(
		&i.Book,
		&i.Owner,
		&i.Bookcount,
		&i.CreatedAt,
	)
	return i, err
}

const getInstoreForUpdate = `-- name: GetInstoreForUpdate :one
SELECT book, owner, bookcount, created_at FROM instore
WHERE book = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetInstoreForUpdate(ctx context.Context, book string) (Instore, error) {
	row := q.queryRow(ctx, q.getInstoreForUpdateStmt, getInstoreForUpdate, book)
	var i Instore
	err := row.Scan(
		&i.Book,
		&i.Owner,
		&i.Bookcount,
		&i.CreatedAt,
	)
	return i, err
}

const listinStore = `-- name: ListinStore :many
SELECT book, owner, bookcount, created_at FROM instore
ORDER BY book
LIMIT $1
OFFSET $2
`

type ListinStoreParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListinStore(ctx context.Context, arg ListinStoreParams) ([]Instore, error) {
	rows, err := q.query(ctx, q.listinStoreStmt, listinStore, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Instore
	for rows.Next() {
		var i Instore
		if err := rows.Scan(
			&i.Book,
			&i.Owner,
			&i.Bookcount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateinStore = `-- name: UpdateinStore :one
UPDATE instore
SET bookcount = $3
WHERE book = $1 AND owner = $2
RETURNING book, owner, bookcount, created_at
`

type UpdateinStoreParams struct {
	Book      string `json:"book"`
	Owner     string `json:"owner"`
	Bookcount int64  `json:"bookcount"`
}

func (q *Queries) UpdateinStore(ctx context.Context, arg UpdateinStoreParams) (Instore, error) {
	row := q.queryRow(ctx, q.updateinStoreStmt, updateinStore, arg.Book, arg.Owner, arg.Bookcount)
	var i Instore
	err := row.Scan(
		&i.Book,
		&i.Owner,
		&i.Bookcount,
		&i.CreatedAt,
	)
	return i, err
}
