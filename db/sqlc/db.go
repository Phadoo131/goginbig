// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAccountStmt, err = db.PrepareContext(ctx, createAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccount: %w", err)
	}
	if q.createEntryStmt, err = db.PrepareContext(ctx, createEntry); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEntry: %w", err)
	}
	if q.createInstoreStmt, err = db.PrepareContext(ctx, createInstore); err != nil {
		return nil, fmt.Errorf("error preparing query CreateInstore: %w", err)
	}
	if q.createrReturnAndBorrowStmt, err = db.PrepareContext(ctx, createrReturnAndBorrow); err != nil {
		return nil, fmt.Errorf("error preparing query CreaterReturnAndBorrow: %w", err)
	}
	if q.deleteAccountStmt, err = db.PrepareContext(ctx, deleteAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccount: %w", err)
	}
	if q.getAccountStmt, err = db.PrepareContext(ctx, getAccount); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccount: %w", err)
	}
	if q.getAccountForUpdateStmt, err = db.PrepareContext(ctx, getAccountForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountForUpdate: %w", err)
	}
	if q.getEntryStmt, err = db.PrepareContext(ctx, getEntry); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntry: %w", err)
	}
	if q.getInstoreStmt, err = db.PrepareContext(ctx, getInstore); err != nil {
		return nil, fmt.Errorf("error preparing query GetInstore: %w", err)
	}
	if q.getInstoreForUpdateStmt, err = db.PrepareContext(ctx, getInstoreForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetInstoreForUpdate: %w", err)
	}
	if q.getTransferStmt, err = db.PrepareContext(ctx, getTransfer); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransfer: %w", err)
	}
	if q.listAccountStmt, err = db.PrepareContext(ctx, listAccount); err != nil {
		return nil, fmt.Errorf("error preparing query ListAccount: %w", err)
	}
	if q.listEntriesStmt, err = db.PrepareContext(ctx, listEntries); err != nil {
		return nil, fmt.Errorf("error preparing query ListEntries: %w", err)
	}
	if q.listTransfersStmt, err = db.PrepareContext(ctx, listTransfers); err != nil {
		return nil, fmt.Errorf("error preparing query ListTransfers: %w", err)
	}
	if q.listinStoreStmt, err = db.PrepareContext(ctx, listinStore); err != nil {
		return nil, fmt.Errorf("error preparing query ListinStore: %w", err)
	}
	if q.updateAccountStmt, err = db.PrepareContext(ctx, updateAccount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccount: %w", err)
	}
	if q.updateinStoreStmt, err = db.PrepareContext(ctx, updateinStore); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateinStore: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAccountStmt != nil {
		if cerr := q.createAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountStmt: %w", cerr)
		}
	}
	if q.createEntryStmt != nil {
		if cerr := q.createEntryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEntryStmt: %w", cerr)
		}
	}
	if q.createInstoreStmt != nil {
		if cerr := q.createInstoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createInstoreStmt: %w", cerr)
		}
	}
	if q.createrReturnAndBorrowStmt != nil {
		if cerr := q.createrReturnAndBorrowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createrReturnAndBorrowStmt: %w", cerr)
		}
	}
	if q.deleteAccountStmt != nil {
		if cerr := q.deleteAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountStmt: %w", cerr)
		}
	}
	if q.getAccountStmt != nil {
		if cerr := q.getAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountStmt: %w", cerr)
		}
	}
	if q.getAccountForUpdateStmt != nil {
		if cerr := q.getAccountForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountForUpdateStmt: %w", cerr)
		}
	}
	if q.getEntryStmt != nil {
		if cerr := q.getEntryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntryStmt: %w", cerr)
		}
	}
	if q.getInstoreStmt != nil {
		if cerr := q.getInstoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInstoreStmt: %w", cerr)
		}
	}
	if q.getInstoreForUpdateStmt != nil {
		if cerr := q.getInstoreForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInstoreForUpdateStmt: %w", cerr)
		}
	}
	if q.getTransferStmt != nil {
		if cerr := q.getTransferStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransferStmt: %w", cerr)
		}
	}
	if q.listAccountStmt != nil {
		if cerr := q.listAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAccountStmt: %w", cerr)
		}
	}
	if q.listEntriesStmt != nil {
		if cerr := q.listEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEntriesStmt: %w", cerr)
		}
	}
	if q.listTransfersStmt != nil {
		if cerr := q.listTransfersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTransfersStmt: %w", cerr)
		}
	}
	if q.listinStoreStmt != nil {
		if cerr := q.listinStoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listinStoreStmt: %w", cerr)
		}
	}
	if q.updateAccountStmt != nil {
		if cerr := q.updateAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountStmt: %w", cerr)
		}
	}
	if q.updateinStoreStmt != nil {
		if cerr := q.updateinStoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateinStoreStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	createAccountStmt          *sql.Stmt
	createEntryStmt            *sql.Stmt
	createInstoreStmt          *sql.Stmt
	createrReturnAndBorrowStmt *sql.Stmt
	deleteAccountStmt          *sql.Stmt
	getAccountStmt             *sql.Stmt
	getAccountForUpdateStmt    *sql.Stmt
	getEntryStmt               *sql.Stmt
	getInstoreStmt             *sql.Stmt
	getInstoreForUpdateStmt    *sql.Stmt
	getTransferStmt            *sql.Stmt
	listAccountStmt            *sql.Stmt
	listEntriesStmt            *sql.Stmt
	listTransfersStmt          *sql.Stmt
	listinStoreStmt            *sql.Stmt
	updateAccountStmt          *sql.Stmt
	updateinStoreStmt          *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		createAccountStmt:          q.createAccountStmt,
		createEntryStmt:            q.createEntryStmt,
		createInstoreStmt:          q.createInstoreStmt,
		createrReturnAndBorrowStmt: q.createrReturnAndBorrowStmt,
		deleteAccountStmt:          q.deleteAccountStmt,
		getAccountStmt:             q.getAccountStmt,
		getAccountForUpdateStmt:    q.getAccountForUpdateStmt,
		getEntryStmt:               q.getEntryStmt,
		getInstoreStmt:             q.getInstoreStmt,
		getInstoreForUpdateStmt:    q.getInstoreForUpdateStmt,
		getTransferStmt:            q.getTransferStmt,
		listAccountStmt:            q.listAccountStmt,
		listEntriesStmt:            q.listEntriesStmt,
		listTransfersStmt:          q.listTransfersStmt,
		listinStoreStmt:            q.listinStoreStmt,
		updateAccountStmt:          q.updateAccountStmt,
		updateinStoreStmt:          q.updateinStoreStmt,
	}
}
