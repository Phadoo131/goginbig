// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAccountStmt, err = db.PrepareContext(ctx, createAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccount: %w", err)
	}
	if q.createEntryStmt, err = db.PrepareContext(ctx, createEntry); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEntry: %w", err)
	}
	if q.createInstoreStmt, err = db.PrepareContext(ctx, createInstore); err != nil {
		return nil, fmt.Errorf("error preparing query CreateInstore: %w", err)
	}
	if q.deleteAccountStmt, err = db.PrepareContext(ctx, deleteAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccount: %w", err)
	}
	if q.getAccountStmt, err = db.PrepareContext(ctx, getAccount); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccount: %w", err)
	}
	if q.getEntryStmt, err = db.PrepareContext(ctx, getEntry); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntry: %w", err)
	}
	if q.getEntryForUpdateStmt, err = db.PrepareContext(ctx, getEntryForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntryForUpdate: %w", err)
	}
	if q.getInstoreStmt, err = db.PrepareContext(ctx, getInstore); err != nil {
		return nil, fmt.Errorf("error preparing query GetInstore: %w", err)
	}
	if q.getInstoreForUpdateStmt, err = db.PrepareContext(ctx, getInstoreForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetInstoreForUpdate: %w", err)
	}
	if q.listAccountsStmt, err = db.PrepareContext(ctx, listAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query ListAccounts: %w", err)
	}
	if q.listEntriesStmt, err = db.PrepareContext(ctx, listEntries); err != nil {
		return nil, fmt.Errorf("error preparing query ListEntries: %w", err)
	}
	if q.listInstoreStmt, err = db.PrepareContext(ctx, listInstore); err != nil {
		return nil, fmt.Errorf("error preparing query ListInstore: %w", err)
	}
	if q.updateEntriesStmt, err = db.PrepareContext(ctx, updateEntries); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEntries: %w", err)
	}
	if q.updateInstoreStmt, err = db.PrepareContext(ctx, updateInstore); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateInstore: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAccountStmt != nil {
		if cerr := q.createAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountStmt: %w", cerr)
		}
	}
	if q.createEntryStmt != nil {
		if cerr := q.createEntryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEntryStmt: %w", cerr)
		}
	}
	if q.createInstoreStmt != nil {
		if cerr := q.createInstoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createInstoreStmt: %w", cerr)
		}
	}
	if q.deleteAccountStmt != nil {
		if cerr := q.deleteAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountStmt: %w", cerr)
		}
	}
	if q.getAccountStmt != nil {
		if cerr := q.getAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountStmt: %w", cerr)
		}
	}
	if q.getEntryStmt != nil {
		if cerr := q.getEntryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntryStmt: %w", cerr)
		}
	}
	if q.getEntryForUpdateStmt != nil {
		if cerr := q.getEntryForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntryForUpdateStmt: %w", cerr)
		}
	}
	if q.getInstoreStmt != nil {
		if cerr := q.getInstoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInstoreStmt: %w", cerr)
		}
	}
	if q.getInstoreForUpdateStmt != nil {
		if cerr := q.getInstoreForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInstoreForUpdateStmt: %w", cerr)
		}
	}
	if q.listAccountsStmt != nil {
		if cerr := q.listAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAccountsStmt: %w", cerr)
		}
	}
	if q.listEntriesStmt != nil {
		if cerr := q.listEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEntriesStmt: %w", cerr)
		}
	}
	if q.listInstoreStmt != nil {
		if cerr := q.listInstoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listInstoreStmt: %w", cerr)
		}
	}
	if q.updateEntriesStmt != nil {
		if cerr := q.updateEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEntriesStmt: %w", cerr)
		}
	}
	if q.updateInstoreStmt != nil {
		if cerr := q.updateInstoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateInstoreStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                      DBTX
	tx                      *sql.Tx
	createAccountStmt       *sql.Stmt
	createEntryStmt         *sql.Stmt
	createInstoreStmt       *sql.Stmt
	deleteAccountStmt       *sql.Stmt
	getAccountStmt          *sql.Stmt
	getEntryStmt            *sql.Stmt
	getEntryForUpdateStmt   *sql.Stmt
	getInstoreStmt          *sql.Stmt
	getInstoreForUpdateStmt *sql.Stmt
	listAccountsStmt        *sql.Stmt
	listEntriesStmt         *sql.Stmt
	listInstoreStmt         *sql.Stmt
	updateEntriesStmt       *sql.Stmt
	updateInstoreStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                      tx,
		tx:                      tx,
		createAccountStmt:       q.createAccountStmt,
		createEntryStmt:         q.createEntryStmt,
		createInstoreStmt:       q.createInstoreStmt,
		deleteAccountStmt:       q.deleteAccountStmt,
		getAccountStmt:          q.getAccountStmt,
		getEntryStmt:            q.getEntryStmt,
		getEntryForUpdateStmt:   q.getEntryForUpdateStmt,
		getInstoreStmt:          q.getInstoreStmt,
		getInstoreForUpdateStmt: q.getInstoreForUpdateStmt,
		listAccountsStmt:        q.listAccountsStmt,
		listEntriesStmt:         q.listEntriesStmt,
		listInstoreStmt:         q.listInstoreStmt,
		updateEntriesStmt:       q.updateEntriesStmt,
		updateInstoreStmt:       q.updateInstoreStmt,
	}
}
