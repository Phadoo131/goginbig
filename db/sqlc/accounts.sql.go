// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: accounts.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  owner
) VALUES (
  $1
)
RETURNING id, owner, created_at
`

func (q *Queries) CreateAccount(ctx context.Context, owner string) (Account, error) {
	row := q.queryRow(ctx, q.createAccountStmt, createAccount, owner)
	var i Account
	err := row.Scan(&i.ID, &i.Owner, &i.CreatedAt)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteAccountStmt, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, owner, created_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.queryRow(ctx, q.getAccountStmt, getAccount, id)
	var i Account
	err := row.Scan(&i.ID, &i.Owner, &i.CreatedAt)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, owner, created_at FROM accounts
ORDER BY id
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.query(ctx, q.listAccountsStmt, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(&i.ID, &i.Owner, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
