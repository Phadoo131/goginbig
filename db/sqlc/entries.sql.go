// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: entries.sql

package db

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
  account_id,
  book,
  amount
) VALUES (
  $1, $2, $3
)
RETURNING id, account_id, book, amount, created_at
`

type CreateEntryParams struct {
	AccountID int64  `json:"accountId"`
	Book      string `json:"book"`
	Amount    int64  `json:"amount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.queryRow(ctx, q.createEntryStmt, createEntry, arg.AccountID, arg.Book, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Book,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getEntry = `-- name: GetEntry :one
SELECT id, account_id, book, amount, created_at FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int64) (Entry, error) {
	row := q.queryRow(ctx, q.getEntryStmt, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Book,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getEntryForUpdate = `-- name: GetEntryForUpdate :one
SELECT id, account_id, book, amount, created_at FROM entries
WHERE account_id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetEntryForUpdate(ctx context.Context, accountID int64) (Entry, error) {
	row := q.queryRow(ctx, q.getEntryForUpdateStmt, getEntryForUpdate, accountID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Book,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, account_id, book, amount, created_at FROM entries
WHERE account_id = $1
ORDER BY id
LIMIT $3
OFFSET $2
`

type ListEntriesParams struct {
	AccountID int64 `json:"accountId"`
	Offset    int32 `json:"offset"`
	Limit     int32 `json:"limit"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.query(ctx, q.listEntriesStmt, listEntries, arg.AccountID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Book,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntries = `-- name: UpdateEntries :one
UPDATE entries
SET amount = $3
WHERE book = $2 AND account_id = $1
RETURNING id, account_id, book, amount, created_at
`

type UpdateEntriesParams struct {
	AccountID int64  `json:"accountId"`
	Book      string `json:"book"`
	Amount    int64  `json:"amount"`
}

func (q *Queries) UpdateEntries(ctx context.Context, arg UpdateEntriesParams) (Entry, error) {
	row := q.queryRow(ctx, q.updateEntriesStmt, updateEntries, arg.AccountID, arg.Book, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Book,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
